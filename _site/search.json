[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TCC Physics Department",
    "section": "",
    "text": "A still more glorious dawn awaits. Not a sunrise, but a galaxy rise. A morning filled with 400 billions suns.",
    "crumbs": [
      "TCC Physics Department"
    ]
  },
  {
    "objectID": "index.html#physics-adjucts",
    "href": "index.html#physics-adjucts",
    "title": "TCC Physics Department",
    "section": "Physics Adjucts",
    "text": "Physics Adjucts",
    "crumbs": [
      "TCC Physics Department"
    ]
  },
  {
    "objectID": "Labs.html",
    "href": "Labs.html",
    "title": "Lab Overview",
    "section": "",
    "text": "A still more glorious dawn awaits. Not a sunrise, but a galaxy rise. A morning filled with 400 billions suns."
  },
  {
    "objectID": "Labs.html#lab-1",
    "href": "Labs.html#lab-1",
    "title": "Lab Overview",
    "section": "Lab 1",
    "text": "Lab 1\nThis is about units and stuff."
  },
  {
    "objectID": "Labs.html#lab-2",
    "href": "Labs.html#lab-2",
    "title": "Lab Overview",
    "section": "Lab 2",
    "text": "Lab 2\nDo NOT look directly into the sun!"
  },
  {
    "objectID": "TCC_Physics_Classes.html",
    "href": "TCC_Physics_Classes.html",
    "title": "Physics Classes",
    "section": "",
    "text": "A still more glorious dawn awaits. Not a sunrise, but a galaxy rise. A morning filled with 400 billions suns.",
    "crumbs": [
      "Physics Classes"
    ]
  },
  {
    "objectID": "TCC_Physics_Classes.html#phy-100",
    "href": "TCC_Physics_Classes.html#phy-100",
    "title": "Physics Classes",
    "section": "PHY 100",
    "text": "PHY 100\nCovers basic concepts of physics, including Newtonian mechanics, properties of matter, heat transfer, waves, fundamental behavior of gases, optics, ionizing radiation, and fundamentals of electricity and magnetism. The assignments in the course require college-level reading fluency, coherent written communication, application of arithmetic, exponents, and algebraic skills such as solving for an unknown variable in an equation, and finding the slope and intercept from the equation of a line. This is a Passport and UCGS transfer course.\nLecture 3 hours. Laboratory 3 hours. Total 6 hours per week. 4 credits",
    "crumbs": [
      "Physics Classes"
    ]
  },
  {
    "objectID": "TCC_Physics_Classes.html#phy-195",
    "href": "TCC_Physics_Classes.html#phy-195",
    "title": "Physics Classes",
    "section": "PHY 195",
    "text": "PHY 195\nProvides an opportunity to explore topical areas of interest to or needed by students.\nMay be used also for special honors courses. May be repeated for credit. Variable hours.\n1-5 credits",
    "crumbs": [
      "Physics Classes"
    ]
  },
  {
    "objectID": "TCC_Physics_Classes.html#phy-201",
    "href": "TCC_Physics_Classes.html#phy-201",
    "title": "Physics Classes",
    "section": "PHY 201",
    "text": "PHY 201\nCovers classical mechanics and thermodynamics. Includes kinematics, Newton’s laws of motion, work, energy, momentum, rotational kinematics, dynamic and static equilibrium, elasticity, gravitation, fluids, simple harmonic motion, calorimetry, ideal gas law, and the laws of thermodynamics. Part I of II. This is a UCGS transfer course.\nLecture 3 hours. Laboratory 3 hours. Total 6 hours per week.\nPrerequisite: MTH 161 or MTH 167 with a grade of C or better.\n4 credits",
    "crumbs": [
      "Physics Classes"
    ]
  },
  {
    "objectID": "TCC_Physics_Classes.html#phy-202",
    "href": "TCC_Physics_Classes.html#phy-202",
    "title": "Physics Classes",
    "section": "PHY 202",
    "text": "PHY 202\nCovers waves, electromagnetism, optics, and modern physics. Includes mechanical waves, sound, electrostatics, Ohm’s law and DC circuits, magnetic forces and magnetic fields, electromagnetic induction, ray optics, wave optics, and selected topics of modern physics. Part II of II. This is a UCGS transfer course.\nLecture 3 hours. Laboratory 3 hours. Total 6 hours per week.\nPrerequisite: PHY 201 with a grade of C or better and MTH 162 or MTH 167 with a grade of C or better.\n4 credits",
    "crumbs": [
      "Physics Classes"
    ]
  },
  {
    "objectID": "TCC_Physics_Classes.html#phy-241",
    "href": "TCC_Physics_Classes.html#phy-241",
    "title": "Physics Classes",
    "section": "PHY 241",
    "text": "PHY 241\nCovers classical mechanics and thermodynamics. Includes kinematics, Newton’s laws of motion, work, energy, momentum, rotational kinematics, dynamics and static equilibrium, elasticity, gravitation, fluids, simple harmonic motion, calorimetry, ideal gas law, and the laws of thermodynamics. Part I of II. This is a UCGS transfer course.\nLecture 3 hours. Laboratory 3 hours. Total 6 hours per week.\nPrerequisites: MTH 263 with a grade of C or better.\n4 credits",
    "crumbs": [
      "Physics Classes"
    ]
  },
  {
    "objectID": "TCC_Physics_Classes.html#phy-242",
    "href": "TCC_Physics_Classes.html#phy-242",
    "title": "Physics Classes",
    "section": "PHY 242",
    "text": "PHY 242\nCovers waves, electromagnetism and optics. Includes mechanical waves and sound, electrostatics, Ohm’s law and DC circuits, magnetic forces and magnetic fields, electromagnetic induction, AC circuits, ray optics, and wave optics. Part II of II. This is a UCGS transfer course.\nLecture 3 hours. Laboratory 3 hours. Total 6 hours per week.\nPrerequisites: PHY 241 with a grade of C or better and MTH 264 with a grade of C or better.\n4 credits",
    "crumbs": [
      "Physics Classes"
    ]
  },
  {
    "objectID": "TCC_Physics_Classes.html#nas-130",
    "href": "TCC_Physics_Classes.html#nas-130",
    "title": "Physics Classes",
    "section": "NAS 130",
    "text": "NAS 130",
    "crumbs": [
      "Physics Classes"
    ]
  },
  {
    "objectID": "TCC_Physics_Classes.html#nas-131",
    "href": "TCC_Physics_Classes.html#nas-131",
    "title": "Physics Classes",
    "section": "NAS 131",
    "text": "NAS 131",
    "crumbs": [
      "Physics Classes"
    ]
  },
  {
    "objectID": "TCC_Physics_Classes.html#nas-132",
    "href": "TCC_Physics_Classes.html#nas-132",
    "title": "Physics Classes",
    "section": "NAS 132",
    "text": "NAS 132",
    "crumbs": [
      "Physics Classes"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "A still more glorious dawn awaits. Not a sunrise, but a galaxy rise. A morning filled with 400 billions suns.About this site",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "Planetarium.html",
    "href": "Planetarium.html",
    "title": "Planetarium",
    "section": "",
    "text": "Planetarium\nPlease register for planetarium events using the following form.\n\n&lt;div id=\"quarto-navigation-envelope\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar-title\"&gt;TCC Physics Department&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-navbar-title\"&gt;TCC Physics Department&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-next\"&gt;About&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-prev\"&gt;Physics Classes&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/index.html\"&gt;TCC Physics Department&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/TCC_Physics_Classes.html\"&gt;Physics Classes&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/Planetarium.html\"&gt;Planetarium&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-int-sidebar:/about.html\"&gt;About&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-breadcrumbs-ee7b25c4fb0a140cbb122b6024a175f8\"&gt;Planetarium&lt;/span&gt;&lt;/p&gt;\n&lt;div class=\"hidden\" data-render-id=\"margin-header\"&gt;\n&lt;div class=\"margin-header-item\"&gt;\n&lt;div id=\"fig-539a35d47e664c97a50115a146a7f1bd-1\" class=\"quarto-figure quarto-figure-center\"&gt;\n&lt;figure class=\"quarto-float quarto-float-fig\"&gt;\n&lt;div&gt;\n&lt;img src=\"tcc_logo.png\" id=\"fig-539a35d47e664c97a50115a146a7f1bd-1\" class=\"img-fluid\" /&gt;\n&lt;/div&gt;\n&lt;/figure&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"hidden\" data-render-id=\"body-header\"&gt;\n&lt;div class=\"body-header-item\"&gt;\n&lt;p&gt;A still more glorious dawn awaits. Not a sunrise, but a galaxy rise. A morning filled with 400 billions suns.&lt;/p&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=\"quarto-meta-markdown\" class=\"hidden\"&gt;\n&lt;p&gt;&lt;span class=\"hidden\" data-render-id=\"quarto-twittercardtitle\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardtitle\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-metasitename\"&gt;TCC Physics Department&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-twittercarddesc\"&gt;&lt;/span&gt; &lt;span class=\"hidden\" data-render-id=\"quarto-ogcardddesc\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n\n&lt;/main&gt; &lt;!-- /main --&gt;\n&lt;script id = \"quarto-html-after-body\" type=\"application/javascript\"&gt;\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const toggleBodyColorMode = (bsSheetEl) =&gt; {\n    const mode = bsSheetEl.getAttribute(\"data-mode\");\n    const bodyEl = window.document.querySelector(\"body\");\n    if (mode === \"dark\") {\n      bodyEl.classList.add(\"quarto-dark\");\n      bodyEl.classList.remove(\"quarto-light\");\n    } else {\n      bodyEl.classList.add(\"quarto-light\");\n      bodyEl.classList.remove(\"quarto-dark\");\n    }\n  }\n  const toggleBodyColorPrimary = () =&gt; {\n    const bsSheetEl = window.document.querySelector(\"link#quarto-bootstrap\");\n    if (bsSheetEl) {\n      toggleBodyColorMode(bsSheetEl);\n    }\n  }\n  toggleBodyColorPrimary();  \n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const isCodeAnnotation = (el) =&gt; {\n    for (const clz of el.classList) {\n      if (clz.startsWith('code-annotation-')) {                     \n        return true;\n      }\n    }\n    return false;\n  }\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    text: function(trigger) {\n      const codeEl = trigger.previousElementSibling.cloneNode(true);\n      for (const childEl of codeEl.children) {\n        if (isCodeAnnotation(childEl)) {\n          childEl.remove();\n        }\n      }\n      return codeEl.innerText;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    var currentTitle = button.getAttribute(\"title\");\n    button.setAttribute(\"title\", \"Copied!\");\n    let tooltip;\n    if (window.bootstrap) {\n      button.setAttribute(\"data-bs-toggle\", \"tooltip\");\n      button.setAttribute(\"data-bs-placement\", \"left\");\n      button.setAttribute(\"data-bs-title\", \"Copied!\");\n      tooltip = new bootstrap.Tooltip(button, \n        { trigger: \"manual\", \n          customClass: \"code-copy-button-tooltip\",\n          offset: [0, -8]});\n      tooltip.show();    \n    }\n    setTimeout(function() {\n      if (tooltip) {\n        tooltip.hide();\n        button.removeAttribute(\"data-bs-title\");\n        button.removeAttribute(\"data-bs-toggle\");\n        button.removeAttribute(\"data-bs-placement\");\n      }\n      button.setAttribute(\"title\", currentTitle);\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {\n    const config = {\n      allowHTML: true,\n      maxWidth: 500,\n      delay: 100,\n      arrow: false,\n      appendTo: function(el) {\n          return el.parentElement;\n      },\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start',\n    };\n    if (contentFn) {\n      config.content = contentFn;\n    }\n    if (onTriggerFn) {\n      config.onTrigger = onTriggerFn;\n    }\n    if (onUntriggerFn) {\n      config.onUntrigger = onUntriggerFn;\n    }\n    window.tippy(el, config); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i&lt;noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      // use id or data attribute instead here\n      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');\n      try { href = new URL(href).hash; } catch {}\n      const id = href.replace(/^#\\/?/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  const xrefs = window.document.querySelectorAll('a.quarto-xref');\n  const processXRef = (id, note) =&gt; {\n    // Strip column container classes\n    const stripColumnClz = (el) =&gt; {\n      el.classList.remove(\"page-full\", \"page-columns\");\n      if (el.children) {\n        for (const child of el.children) {\n          stripColumnClz(child);\n        }\n      }\n    }\n    stripColumnClz(note)\n    if (id.startsWith('sec-')) {\n      // Special case sections, only their first couple elements\n      const container = document.createElement(\"div\");\n      if (note.children && note.children.length &gt; 2) {\n        for (let i = 0; i &lt; 2; i++) {\n          container.appendChild(note.children[i].cloneNode(true));\n        }\n        return container.innerHTML\n      } else {\n        return note.innerHTML;\n      }\n    } else {\n      // Remove any anchor links if they are present\n      const anchorLink = note.querySelector('a.anchorjs-link');\n      if (anchorLink) {\n        anchorLink.remove();\n      }\n      return note.innerHTML;\n    }\n  }\n  for (var i=0; i&lt;xrefs.length; i++) {\n    const xref = xrefs[i];\n    tippyHover(xref, undefined, function(instance) {\n      instance.disable();\n      let url = xref.getAttribute('href');\n      let hash = undefined; \n      if (url.startsWith('#')) {\n        hash = url;\n      } else {\n        try { hash = new URL(url).hash; } catch {}\n      }\n      if (hash) {\n        const id = hash.replace(/^#\\/?/, \"\");\n        const note = window.document.getElementById(id);\n        if (note !== null) {\n          try {\n            const html = processXRef(id, note.cloneNode(true));\n            instance.setContent(html);\n          } finally {\n            instance.enable();\n            instance.show();\n          }\n        } else {\n          // See if we can fetch this\n          fetch(url.split('#')[0])\n          .then(res =&gt; res.text())\n          .then(html =&gt; {\n            const parser = new DOMParser();\n            const htmlDoc = parser.parseFromString(html, \"text/html\");\n            const note = htmlDoc.getElementById(id);\n            if (note !== null) {\n              const html = processXRef(id, note);\n              instance.setContent(html);\n            } \n          }).finally(() =&gt; {\n            instance.enable();\n            instance.show();\n          });\n        }\n      }\n    }, function(instance) {\n    });\n  }\n      let selectedAnnoteEl;\n      const selectorForAnnotation = ( cell, annotation) =&gt; {\n        let cellAttr = 'data-code-cell=\"' + cell + '\"';\n        let lineAttr = 'data-code-annotation=\"' +  annotation + '\"';\n        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';\n        return selector;\n      }\n      const selectCodeLines = (annoteEl) =&gt; {\n        const doc = window.document;\n        const targetCell = annoteEl.getAttribute(\"data-target-cell\");\n        const targetAnnotation = annoteEl.getAttribute(\"data-target-annotation\");\n        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));\n        const lines = annoteSpan.getAttribute(\"data-code-lines\").split(\",\");\n        const lineIds = lines.map((line) =&gt; {\n          return targetCell + \"-\" + line;\n        })\n        let top = null;\n        let height = null;\n        let parent = null;\n        if (lineIds.length &gt; 0) {\n            //compute the position of the single el (top and bottom and make a div)\n            const el = window.document.getElementById(lineIds[0]);\n            top = el.offsetTop;\n            height = el.offsetHeight;\n            parent = el.parentElement.parentElement;\n          if (lineIds.length &gt; 1) {\n            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);\n            const bottom = lastEl.offsetTop + lastEl.offsetHeight;\n            height = bottom - top;\n          }\n          if (top !== null && height !== null && parent !== null) {\n            // cook up a div (if necessary) and position it \n            let div = window.document.getElementById(\"code-annotation-line-highlight\");\n            if (div === null) {\n              div = window.document.createElement(\"div\");\n              div.setAttribute(\"id\", \"code-annotation-line-highlight\");\n              div.style.position = 'absolute';\n              parent.appendChild(div);\n            }\n            div.style.top = top - 2 + \"px\";\n            div.style.height = height + 4 + \"px\";\n            div.style.left = 0;\n            let gutterDiv = window.document.getElementById(\"code-annotation-line-highlight-gutter\");\n            if (gutterDiv === null) {\n              gutterDiv = window.document.createElement(\"div\");\n              gutterDiv.setAttribute(\"id\", \"code-annotation-line-highlight-gutter\");\n              gutterDiv.style.position = 'absolute';\n              const codeCell = window.document.getElementById(targetCell);\n              const gutter = codeCell.querySelector('.code-annotation-gutter');\n              gutter.appendChild(gutterDiv);\n            }\n            gutterDiv.style.top = top - 2 + \"px\";\n            gutterDiv.style.height = height + 4 + \"px\";\n          }\n          selectedAnnoteEl = annoteEl;\n        }\n      };\n      const unselectCodeLines = () =&gt; {\n        const elementsIds = [\"code-annotation-line-highlight\", \"code-annotation-line-highlight-gutter\"];\n        elementsIds.forEach((elId) =&gt; {\n          const div = window.document.getElementById(elId);\n          if (div) {\n            div.remove();\n          }\n        });\n        selectedAnnoteEl = undefined;\n      };\n        // Handle positioning of the toggle\n    window.addEventListener(\n      \"resize\",\n      throttle(() =&gt; {\n        console.log(\"RESIZE\");\n        elRect = undefined;\n        if (selectedAnnoteEl) {\n          selectCodeLines(selectedAnnoteEl);\n        }\n      }, 10)\n    );\n    function throttle(fn, ms) {\n    let throttle = false;\n    let timer;\n      return (...args) =&gt; {\n        if(!throttle) { // first call gets through\n            fn.apply(this, args);\n            throttle = true;\n        } else { // all the others get throttled\n            if(timer) clearTimeout(timer); // cancel #2\n            timer = setTimeout(() =&gt; {\n              fn.apply(this, args);\n              timer = throttle = false;\n            }, ms);\n        }\n      };\n    }\n      // Attach click handler to the DT\n      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');\n      for (const annoteDlNode of annoteDls) {\n        annoteDlNode.addEventListener('click', (event) =&gt; {\n          const clickedEl = event.target;\n          if (clickedEl !== selectedAnnoteEl) {\n            unselectCodeLines();\n            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');\n            if (activeEl) {\n              activeEl.classList.remove('code-annotation-active');\n            }\n            selectCodeLines(clickedEl);\n            clickedEl.classList.add('code-annotation-active');\n          } else {\n            // Unselect the line\n            unselectCodeLines();\n            clickedEl.classList.remove('code-annotation-active');\n          }\n        });\n      }\n  const findCites = (el) =&gt; {\n    const parentEl = el.parentElement;\n    if (parentEl) {\n      const cites = parentEl.dataset.cites;\n      if (cites) {\n        return {\n          el,\n          cites: cites.split(' ')\n        };\n      } else {\n        return findCites(el.parentElement)\n      }\n    } else {\n      return undefined;\n    }\n  };\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i&lt;bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const citeInfo = findCites(ref);\n    if (citeInfo) {\n      tippyHover(citeInfo.el, function() {\n        var popup = window.document.createElement('div');\n        citeInfo.cites.forEach(function(cite) {\n          var citeDiv = window.document.createElement('div');\n          citeDiv.classList.add('hanging-indent');\n          citeDiv.classList.add('csl-entry');\n          var biblioDiv = window.document.getElementById('ref-' + cite);\n          if (biblioDiv) {\n            citeDiv.innerHTML = biblioDiv.innerHTML;\n          }\n          popup.appendChild(citeDiv);\n        });\n        return popup.innerHTML;\n      });\n    }\n  }\n});\n&lt;/script&gt;\n&lt;/div&gt; &lt;!-- /content --&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;",
    "crumbs": [
      "Planetarium"
    ]
  }
]